import { describe, it, expect } from '@jest/globals';\nimport axios, { AxiosResponse } from 'axios';\n\nconst BASE_URL = process.env.API_BASE_URL;\nconst AUTH_TOKEN = process.env.API_AUTH_TOKEN;\n\n/**\n * Utility function to create an Axios instance with optional authorization.\n */\nfunction createAxiosInstance(token?: string) {\n  return axios.create({\n    baseURL: BASE_URL,\n    headers: token\n      ? {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        }\n      : {\n          'Content-Type': 'application/json',\n        },\n  });\n}\n\ndescribe('GET /api/v3/runs/{runId}', () => {\n  // Replace with a real or mocked run ID known to exist in your testing environment.\n  const validRunId = 'valid_run_id_123';\n\n  // A run ID that does not exist in the system\n  const nonExistentRunId = 'nonexistent_run_id_999';\n\n  // Various invalid run IDs for input validation\n  const invalidRunIds = ['', ' ', '!!!', '12345678901234567890123456789012345'];\n\n  // Check environment variables\n  if (!BASE_URL) {\n    throw new Error('Missing API_BASE_URL environment variable');\n  }\n\n  //------------------------------------------------------------------------------\n  // 1. Missing token (Should return 401 or 403)\n  //------------------------------------------------------------------------------\n  it('should return 401 or 403 for requests without an auth token', async () => {\n    const instance = createAxiosInstance();\n    let status: number | undefined;\n    try {\n      await instance.get(`/api/v3/runs/${validRunId}`);\n    } catch (error: any) {\n      const response: AxiosResponse = error.response;\n      status = response.status;\n    }\n    expect([401, 403]).toContain(status);\n  });\n\n  //------------------------------------------------------------------------------\n  // 2. Invalid token (Should return 401 or 403)\n  //------------------------------------------------------------------------------\n  it('should return 401 or 403 for requests with an invalid auth token', async () => {\n    const instance = createAxiosInstance('invalid_token');\n    let status: number | undefined;\n    try {\n      await instance.get(`/api/v3/runs/${validRunId}`);\n    } catch (error: any) {\n      const response: AxiosResponse = error.response;\n      status = response.status;\n    }\n    expect([401, 403]).toContain(status);\n  });\n\n  //------------------------------------------------------------------------------\n  // 3. Valid token, but run not found (Should return 404)\n  //------------------------------------------------------------------------------\n  it('should return 404 if the run is not found', async () => {\n    if (!AUTH_TOKEN) {\n      console.warn('Skipping test due to missing API_AUTH_TOKEN');\n      return;\n    }\n    const instance = createAxiosInstance(AUTH_TOKEN);\n    let status: number | undefined;\n    try {\n      await instance.get(`/api/v3/runs/${nonExistentRunId}`);\n    } catch (error: any) {\n      const response: AxiosResponse = error.response;\n      status = response.status;\n    }\n    expect(status).toBe(404);\n  });\n\n  //------------------------------------------------------------------------------\n  // 4. Invalid runId input (Should return 400 or 422)\n  //------------------------------------------------------------------------------\n  invalidRunIds.forEach((id) => {\n    it(`should return 400 or 422 when runId is '${id}'`, async () => {\n      if (!AUTH_TOKEN) {\n        console.warn('Skipping test due to missing API_AUTH_TOKEN');\n        return;\n      }\n      const instance = createAxiosInstance(AUTH_TOKEN);\n      let status: number | undefined;\n      try {\n        await instance.get(`/api/v3/runs/${id}`);\n      } catch (error: any) {\n        const response: AxiosResponse = error.response;\n        status = response.status;\n      }\n      expect([400, 422]).toContain(status);\n    });\n  });\n\n  //------------------------------------------------------------------------------\n  // 5. Valid token, valid runId, successful retrieval (Should return 200)\n  //------------------------------------------------------------------------------\n  it('should return 200 and a valid run object for a valid runId with a valid token', async () => {\n    if (!AUTH_TOKEN) {\n      console.warn('Skipping test due to missing API_AUTH_TOKEN');\n      return;\n    }\n    const instance = createAxiosInstance(AUTH_TOKEN);\n    const response = await instance.get(`/api/v3/runs/${validRunId}`);\n\n    expect(response.status).toBe(200);\n    expect(response.headers['content-type']).toContain('application/json');\n\n    // Basic schema validation\n    const data = response.data;\n    // Adjust checks according to #/components/schemas/RetrieveRunResponse\n    expect(typeof data).toBe('object');\n    expect(typeof data.runId).toBe('string');\n    expect(typeof data.status).toBe('string');\n    // payload and output might be omitted if using a public key, so check if they exist\n    // without failing the test if undefined.\n    if (data.payload !== undefined) {\n      expect(typeof data.payload).toBe('object');\n    }\n    if (data.output !== undefined) {\n      expect(typeof data.output).toBe('object');\n    }\n    // attempts could be an array, number, or some structure depending on the schema\n    // For demonstration, we assume it's an array.\n    expect(Array.isArray(data.attempts)).toBe(true);\n  });\n\n  //------------------------------------------------------------------------------\n  // 6. Check response headers besides Content-Type (optional)\n  //------------------------------------------------------------------------------\n  it('should include standard headers (e.g., Cache-Control, X-RateLimit*) if applicable', async () => {\n    if (!AUTH_TOKEN) {\n      console.warn('Skipping test due to missing API_AUTH_TOKEN');\n      return;\n    }\n    const instance = createAxiosInstance(AUTH_TOKEN);\n    const response = await instance.get(`/api/v3/runs/${validRunId}`);\n\n    // Example checks\n    expect(response.headers['content-type']).toContain('application/json');\n    // Optional checks for X-RateLimit\n    // expect(response.headers['x-ratelimit-limit']).toBeDefined();\n    // expect(response.headers['x-ratelimit-remaining']).toBeDefined();\n    // Expect no caching or a specified caching policy\n    // expect(response.headers['cache-control']).toBeDefined();\n  });\n\n  //------------------------------------------------------------------------------\n  // 7. Edge and limit testing: extremely large runId\n  //------------------------------------------------------------------------------\n  it('should handle extremely large runId gracefully', async () => {\n    if (!AUTH_TOKEN) {\n      console.warn('Skipping test due to missing API_AUTH_TOKEN');\n      return;\n    }\n    const instance = createAxiosInstance(AUTH_TOKEN);\n    const largeRunId = '9'.repeat(1000); // Very large numeric string\n\n    let status: number | undefined;\n    try {\n      await instance.get(`/api/v3/runs/${largeRunId}`);\n    } catch (error: any) {\n      const response: AxiosResponse = error.response;\n      status = response.status;\n    }\n    // Depending on implementation, might be 400, 422, or 404\n    expect([400, 422, 404]).toContain(status);\n  });\n\n  //------------------------------------------------------------------------------\n  // You could add more tests for rate-limiting, server errors, forbidden, etc.\n  //------------------------------------------------------------------------------\n});\n