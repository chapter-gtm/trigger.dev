import axios, { AxiosResponse, AxiosError } from 'axios';\nimport { describe, it, expect } from '@jest/globals';\n\nconst baseURL = process.env.API_BASE_URL;\nconst authToken = process.env.API_AUTH_TOKEN;\n\nfunction getEndpoint(projectRef: string, env: string) {\n  return `${baseURL}/api/v1/projects/${projectRef}/envvars/${env}`;\n}\n\n// Example of a valid request body for creating an environment variable\nconst validEnvVarBody = {\n  key: 'TEST_KEY',\n  value: 'TEST_VALUE',\n};\n\ndescribe('POST /api/v1/projects/{projectRef}/envvars/{env}', () => {\n  /*\n    1. Valid Request Test (200)\n    Checks that a correct payload, valid path parameters, and valid auth token\n    produce a 200 response and conform to the success schema.\n  */\n  it('should create environment variable with valid input (200)', async () => {\n    const projectRef = '123';\n    const env = 'dev';\n\n    try {\n      const response: AxiosResponse = await axios.post(\n        getEndpoint(projectRef, env),\n        validEnvVarBody,\n        {\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      expect(response.status).toBe(200);\n      // Verify response body has a "message" or similar success property\n      expect(response.data).toHaveProperty('message');\n      // Verify the Content-Type header\n      expect(response.headers['content-type']).toMatch(/application\\/json/i);\n    } catch (error: any) {\n      throw new Error(`Expected 200 but received ${error?.response?.status}. Error: ${error.message}`);\n    }\n  });\n\n  /*\n    2. Input Validation Test (400 or 422)\n    Attempts to create the environment variable with invalid body parameters.\n    We expect a 400 or 422 error.\n  */\n  it('should return 400 or 422 for invalid body', async () => {\n    const projectRef = '123';\n    const env = 'dev';\n\n    // Missing the "value" field\n    const invalidBody = {\n      key: 'TEST_KEY',\n      // value: 'TEST_VALUE'\n    };\n\n    try {\n      await axios.post(getEndpoint(projectRef, env), invalidBody, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      throw new Error('Expected request to fail with 400 or 422');\n    } catch (error: any) {\n      // Some APIs may return 422 instead of 400 for malformed data.\n      expect([400, 422]).toContain(error?.response?.status);\n      expect(error.response.data).toHaveProperty('error');\n      expect(error.response.headers['content-type']).toMatch(/application\\/json/i);\n    }\n  });\n\n  /*\n    3. Authorization/Authentication Test (401 or 403)\n    Ensures that requests without valid credentials are rejected.\n  */\n  it('should return 401 or 403 for missing or invalid auth token', async () => {\n    const projectRef = '123';\n    const env = 'dev';\n\n    try {\n      await axios.post(\n        getEndpoint(projectRef, env),\n        validEnvVarBody,\n        {\n          headers: {\n            // Intentionally leaving out Authorization header\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      throw new Error('Expected request to fail with 401 or 403');\n    } catch (error: any) {\n      // API might return 401 Unauthorized or 403 Forbidden\n      expect([401, 403]).toContain(error?.response?.status);\n      expect(error.response.data).toHaveProperty('error');\n      expect(error.response.headers['content-type']).toMatch(/application\\/json/i);\n    }\n  });\n\n  /*\n    4. Resource Not Found Test (404)\n    Attempts to create an environment variable for a non-existent projectRef or env.\n  */\n  it('should return 404 if projectRef or env does not exist', async () => {\n    const nonExistentProjectRef = 'nonExistentProject';\n    const nonExistentEnv = 'nonExistentEnv';\n\n    try {\n      await axios.post(\n        getEndpoint(nonExistentProjectRef, nonExistentEnv),\n        validEnvVarBody,\n        {\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      throw new Error('Expected request to fail with 404');\n    } catch (error: any) {\n      expect(error?.response?.status).toBe(404);\n      expect(error.response.data).toHaveProperty('error');\n      expect(error.response.headers['content-type']).toMatch(/application\\/json/i);\n    }\n  });\n\n  /*\n    5. Edge Case & Limit Testing\n    Tests creating very large environment variable values.\n    The API may accept or reject these requests depending on size limits.\n  */\n  it('should handle large payload gracefully', async () => {\n    const projectRef = '123';\n    const env = 'dev';\n\n    const largeBody = {\n      key: 'TEST_KEY_LARGE',\n      // Create a very large string for the "value"\n      value: 'A'.repeat(10000),\n    };\n\n    try {\n      const response: AxiosResponse = await axios.post(\n        getEndpoint(projectRef, env),\n        largeBody,\n        {\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      // If the server permits large payloads, expect a 200\n      expect(response.status).toBe(200);\n      expect(response.data).toHaveProperty('message');\n      expect(response.headers['content-type']).toMatch(/application\\/json/i);\n    } catch (error: any) {\n      // If the server rejects large payloads, we might see 400 or 413 (Payload Too Large)\n      expect([400, 413]).toContain(error?.response?.status);\n      expect(error.response.data).toHaveProperty('error');\n      expect(error.response.headers['content-type']).toMatch(/application\\/json/i);\n    }\n  });\n});\n