import axios, { AxiosInstance, AxiosError } from 'axios';\nimport { describe, it, expect, beforeAll } from '@jest/globals';\n\ndescribe('POST /api/v1/schedules', () => {\n  let client: AxiosInstance;\n  const baseURL = process.env.API_BASE_URL;\n  const authToken = process.env.API_AUTH_TOKEN;\n\n  beforeAll(() => {\n    client = axios.create({\n      baseURL,\n      headers: { Authorization: `Bearer ${authToken}` },\n    });\n  });\n\n  describe('Valid Request', () => {\n    it('should create a schedule with a valid payload', async () => {\n      const payload = {\n        name: 'Test Schedule',\n        type: 'IMPERATIVE',\n        startTime: '2023-10-01T09:00:00Z',\n      };\n\n      const response = await client.post('/api/v1/schedules', payload);\n      expect(response.status).toBe(200);\n      expect(response.headers['content-type']).toContain('application/json');\n\n      // Basic response body validation (adjust based on actual schema)\n      expect(response.data).toHaveProperty('id');\n      expect(response.data).toHaveProperty('name', payload.name);\n      expect(response.data).toHaveProperty('type', payload.type);\n      expect(response.data).toHaveProperty('startTime', payload.startTime);\n    });\n  });\n\n  describe('Input Validation', () => {\n    it('should return 400 or 422 when required field \"type\" is missing', async () => {\n      const invalidPayload = {\n        // Missing 'type'\n        name: 'Test Schedule',\n        startTime: '2023-10-01T09:00:00Z',\n      };\n\n      try {\n        await client.post('/api/v1/schedules', invalidPayload);\n        fail('Request should have failed');\n      } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response) {\n          expect([400, 422]).toContain(axiosError.response.status);\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    it('should return 400 or 422 when \"type\" is not \"IMPERATIVE\"', async () => {\n      const invalidPayload = {\n        name: 'Wrong type schedule',\n        type: 'INVALID_TYPE',\n        startTime: '2023-10-01T09:00:00Z',\n      };\n\n      try {\n        await client.post('/api/v1/schedules', invalidPayload);\n        fail('Request should have failed');\n      } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response) {\n          expect([400, 422]).toContain(axiosError.response.status);\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    it('should return 400 or 422 for an empty string field', async () => {\n      const invalidPayload = {\n        name: '',\n        type: 'IMPERATIVE',\n        startTime: '2023-10-01T09:00:00Z',\n      };\n\n      try {\n        await client.post('/api/v1/schedules', invalidPayload);\n        fail('Request should have failed');\n      } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response) {\n          expect([400, 422]).toContain(axiosError.response.status);\n        } else {\n          throw error;\n        }\n      }\n    });\n  });\n\n  describe('Response Headers Validation', () => {\n    it('should return application/json content-type for a valid request', async () => {\n      const payload = {\n        name: 'Header Test',\n        type: 'IMPERATIVE',\n        startTime: '2023-10-01T09:00:00Z',\n      };\n      const response = await client.post('/api/v1/schedules', payload);\n      expect(response.headers['content-type']).toContain('application/json');\n    });\n  });\n\n  describe('Edge Case & Limit Testing', () => {\n    it('should return 401 or 403 if no auth token is provided', async () => {\n      const unauthorizedClient = axios.create({ baseURL });\n      const payload = {\n        name: 'Unauthorized Test',\n        type: 'IMPERATIVE',\n        startTime: '2023-10-01T09:00:00Z',\n      };\n\n      try {\n        await unauthorizedClient.post('/api/v1/schedules', payload);\n        fail('Request should have failed');\n      } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response) {\n          expect([401, 403]).toContain(axiosError.response.status);\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    it('should handle large payload gracefully', async () => {\n      const largeName = 'A'.repeat(10000); // example of large input\n      const payload = {\n        name: largeName,\n        type: 'IMPERATIVE',\n        startTime: '2023-10-01T09:00:00Z',\n      };\n\n      try {\n        const response = await client.post('/api/v1/schedules', payload);\n        expect(response.status).toBe(200);\n        expect(response.headers['content-type']).toContain('application/json');\n      } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response) {\n          // Acceptable responses could be 400, 413, 422, etc. depending on server config\n          expect([400, 413, 422]).toContain(axiosError.response.status);\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    it('should handle malformed JSON request', async () => {\n      // We'll simulate malformed JSON by sending a string instead of an object\n      try {\n        await client.post('/api/v1/schedules', '{ invalidJson: true');\n        fail('Request should have failed');\n      } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response) {\n          expect([400, 422]).toContain(axiosError.response.status);\n        } else {\n          throw error;\n        }\n      }\n    });\n  });\n});